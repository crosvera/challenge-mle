name: CI

on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      # Cache the Pipenv environment in .venv
      - name: Cache pipenv environment
        uses: actions/cache@v3
        with:
          path: .venv
          key: ${{ runner.os }}-pipenv-${{ hashFiles('Pipfile.lock') }}
          restore-keys: ${{ runner.os }}-pipenv-

      - name: Install pipenv
        run: |
          python -m pip install --upgrade pip
          python -m pip install pipenv

      - name: Install dependencies (including dev)
        # Use the in-project venv so we can cache it in .venv
        env:
          PIPENV_VENV_IN_PROJECT: "true"
        run: |
          pipenv install --dev

      # Optional: Run linters/formatters
      - name: Run black
        env:
          PIPENV_VENV_IN_PROJECT: "true"
        run: |
          pipenv run black --check ./challenge

      - name: Run flake8
        env:
          PIPENV_VENV_IN_PROJECT: "true"
        run: |
          pipenv run flake8 ./challenge

      - name: Run isort
        env:
          PIPENV_VENV_IN_PROJECT: "true"
        run: |
          pipenv run isort --profile black --check-only ./challenge

      # Run tests with coverage
      - name: Run tests
        env:
          PIPENV_VENV_IN_PROJECT: "true"
        run: |
          pipenv run pytest --cov-config=.coveragerc --cov-report term --cov-report html:reports/html --cov-report xml:reports/coverage.xml --junitxml=reports/junit.xml --cov=challenge tests/model
          pipenv run pytest --cov-config=.coveragerc --cov-report term --cov-report html:reports/html --cov-report xml:reports/coverage.xml --junitxml=reports/junit.xml --cov=challenge tests/api